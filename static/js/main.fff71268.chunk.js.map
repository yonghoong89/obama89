{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["Movieposter","_ref2","poster","alt","react_default","a","createElement","src","title","className","Moviegenre","_ref3","genre","Movie","_ref","genres","synopsis","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovies","_this","movies","movie","src_Movie","medium_cover_image","id","_getMoives","_callee","regenerator_default","wrap","_context","prev","next","_callapi","sent","setState","stop","this","fetch","then","potato","json","data","catch","error","console","log","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUA8BA,SAASA,EAATC,GAAkC,IAAZC,EAAYD,EAAZC,OAAOC,EAAKF,EAALE,IAC3B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAQM,MAAOL,EAAKA,IAAKA,EAAKM,UAAU,iBAGtD,SAASC,EAATC,GAA4B,IAAPC,EAAOD,EAAPC,MACnB,OACER,EAAAC,EAAAC,cAAA,QAAMG,UAAU,eAAeG,GAoBpBC,MApDf,SAAAC,GAA8C,IAA9BN,EAA8BM,EAA9BN,MAAMN,EAAwBY,EAAxBZ,OAAOa,EAAiBD,EAAjBC,OAAOC,EAAUF,EAAVE,SAClC,OACEZ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBACbL,EAAAC,EAAAC,cAACN,EAAD,CAAaE,OAAQA,EAAQC,IAAKK,KAEpCJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBACbL,EAAAC,EAAAC,cAAA,UAAKE,GACLJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBACZM,EAAOE,IAAI,SAACL,EAAMM,GAAP,OAAed,EAAAC,EAAAC,cAACI,EAAD,CAAYE,MAAOA,EAAOO,IAAKD,OAE5Dd,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACbL,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CACEgB,KAAOL,EACPM,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,gBC2BLC,6MA3CbC,MAAQ,KAMRC,cAAgB,WASd,OAReC,EAAKF,MAAMG,OAAOb,IAAI,SAACc,GACpC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,CACPxB,MAAOuB,EAAMvB,MACbN,OAAQ6B,EAAME,mBACdd,IAAKY,EAAMG,GACXnB,OAAQgB,EAAMhB,OACdC,SAAUe,EAAMf,gBAKpBmB,gCAAa,SAAAC,IAAA,IAAAN,EAAA,OAAAO,EAAAhC,EAAAiC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUZ,EAAKa,WADf,OACLZ,EADKS,EAAAI,KAEXd,EAAKe,SAAS,CACZd,OAAOA,IAHE,wBAAAS,EAAAM,SAAAT,EAAAU,WAObJ,SAAW,WACT,OAAOK,MAAM,yDACZC,KAAK,SAAAC,GAAM,OAAIA,EAAOC,SACtBF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKrB,SACvBsB,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,yFA1B5BP,KAAKX,8CA6BE,IACAL,EAAUgB,KAAKnB,MAAfG,OACP,OACE1B,EAAAC,EAAAC,cAAA,OAAKG,UAAWqB,EAAS,MAAQ,eAC/BgB,KAAKnB,MAAMG,OAASgB,KAAKlB,gBAAkB,kBAtCjC4B,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3D,EAAAC,EAAAC,cAAC0D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC","file":"static/js/main.fff71268.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Movie.css';\r\nimport LinesEllipsis from 'react-lines-ellipsis'\r\n\r\nfunction Movie({title,poster,genres,synopsis}){\r\n  return(\r\n    <div className=\"movie\">\r\n      <div className=\"movie_column\">\r\n        <Movieposter poster={poster} alt={title} />\r\n      </div>\r\n      <div className=\"movie_column\">\r\n        <h1>{title}</h1>\r\n        <div className=\"movie_genres\">\r\n          {genres.map((genre,index)=><Moviegenre genre={genre} key={index} />)}\r\n        </div>\r\n        <div className=\"movie_synopsis\">           \r\n          <LinesEllipsis\r\n            text= {synopsis}\r\n            maxLine='3'\r\n            ellipsis='...'\r\n            trimRight\r\n            basedOn='letters'\r\n          />\r\n        </div>    \r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction Movieposter({poster,alt}){\r\n  return(\r\n    <img src={poster} title={alt} alt={alt} className=\"movie_poster\" />\r\n  )\r\n}\r\nfunction Moviegenre({genre}){\r\n  return(\r\n    <span className=\"movie_genre\">{genre}</span>\r\n  )\r\n}\r\n\r\nMovie.propTypes ={\r\n  title: PropTypes.string.isRequired,\r\n  poster: PropTypes.string.isRequired,\r\n  genres: PropTypes.array.isRequired,\r\n  synopsis: PropTypes.string.isRequired\r\n}\r\n\r\nMovieposter.propTypes ={\r\n  poster: PropTypes.string.isRequired,\r\n  alt: PropTypes.string.isRequired\r\n}\r\n\r\nMoviegenre.propTypes ={\r\n  genre: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Movie","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\nclass App extends Component {\n\n  state = {}\n\n  componentDidMount(){\n    this._getMoives()\n  }\n\n  _renderMovies = () =>{\n    const movies = this.state.movies.map((movie)=>{\n      return <Movie \n      title={movie.title}\n      poster={movie.medium_cover_image} \n      key={movie.id}\n      genres={movie.genres} \n      synopsis={movie.synopsis} />\n    });\n    return movies\n  }\n\n  _getMoives = async () =>{\n    const movies = await this._callapi() \n    this.setState({\n      movies:movies //movies 모던 자바스크립트\n    })\n  }\n\n  _callapi = () =>{\n    return fetch('https://yts.am/api/v2/list_movies.json?sort_by=rating')\n    .then(potato => potato.json())//데이터를 상황에 맞게 편집 할 수 있음\n    .then(json => json.data.movies)\n    .catch(error => console.log(error))\n  }\n\n  render() {\n    const {movies} = this.state; \n    return (\n      <div className={movies ? \"app\" : \"app_loading\"}>\n       {this.state.movies ? this._renderMovies() : \"loading\"}\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}